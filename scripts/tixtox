#!/usr/bin/env python

import ConfigParser
import curses
import multiprocessing
import os
import redislite
import redislite.patch
import subprocess
import sys
import time


REDIS_DB = '/tmp/tixtox.db'


def get_tox_envlist():
    config = ConfigParser.ConfigParser()
    config.read('tox.ini')
    envlist = []
    for en in config.get('tox', 'envlist').replace('\n', ',').strip().split(','):
        if en:
            envlist.append(en)
    return envlist


class ToxProcess(subprocess.Popen):
    def __init__(self, *args, **kwargs):
        self.redis_db = redislite.Redis('/tmp/tixtox.db')
        self.command = ' '.join(args[0])
        self.output_queue = 'tixtox:' + self.command + ':stdout'
        self.returncode_key = 'tixtox:' + self.command + ':returncode'
        super(ToxProcess, self).__init__(*args, **kwargs)
        self.reader_process = multiprocessing.Process(
            target=self.read_stdout
        )
        self.reader_process.start()
        # self.reader_process.join()

    def read_stdout(self):
        '''The body of the tread: read lines and put them on the queue.'''
        for item in iter(self.stdout.readline, ''):
            for line in item.split('\n'):
                #print('queue_write: %s' % line)
                self.redis_db.rpush(self.output_queue, line)


def spawn_tox_envs(envs):
    children = []
    for env in envs:
        command = ['tox', '-e', env]
        children.append(
            ToxProcess(
                command,
                bufsize=8192,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT
            )
        )
    return children


def display_status(children, redis_db):
    our_dir = os.path.dirname(__file__)
    pwd = os.getcwd()
    os.chdir(our_dir)
    os.chdir('..')
    # web_server = subprocess.Popen([sys.executable, 'manage.py', 'runserver', '127.0.0.1:8002'])

    done = []
    while children:
        running = []
        for child in children:
            rc = child.poll()
            if rc is not None:
                redis_db.set(child.returncode_key, rc)
                done.append(child)
                child.reader_process.join()
            else:
                running.append(child)

        children = running
        time.sleep(.1)
    # web_server.kill()


def main():
    r = redislite.Redis('/tmp/tixtox.db')
    for key in r.keys('tixtox:*'):
        r.delete(key)
    envs = get_tox_envlist()
    children = spawn_tox_envs(envs)
    display_status(children, r)


if __name__ == "__main__":
    main()